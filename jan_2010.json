{ "new": [
  { "name": "Node.js",
    "x": 30,
    "y": 50,
    "description": "Node.js is just one example of a class of single threaded servers with asynchronous I/O that are seeing increased popularity. A traditional web or application server associates each incoming request with a thread until all the processing tasks associated with that request are complete and the response has been sent back. If any of those tasks involve I/O, the thread blocks while that I/O takes place. This approach can waste finite resources such as file descriptors and memory since each connection occupies a thread whether or not that thread is actually consuming CPU cycles. An alternative architecture is starting to emerge in implementations like Node.js (a Javascript server running on Google V8), Nginx (an open source web server and proxy), and Webbit (a Java application server), that uses a single thread to serve many connections, processing all I/O asynchronously. These servers support orders of magnitude more simultaneous connections because each one consumes far less resources."
  },

  { "name": "Backbone.js",
    "x": 30,
    "y": -80,
    "description": "JavaScript is now established as a powerful, mainstream language that can be used in a variety environments both on client and server sides. As JavaScript codebases expand, more JavaScript tooling support becomes necessary, especially in the continuous integration and testing spaces. Tools like Backbone.js, SpineJS, JavaScriptMVC, Jasmine, JSTestDriver and HRcov are coming to the forefront. They are created by a vibrant community that continues to grow."
  },

  { "name": "Single command deploy",
    "x": 100,
    "y": 50,
    "description": "A key step in the Continuous Delivery process is the ability to release software arbitrarily close to when the business wants it. The ability to do single command deploy relies on a complete set of activities that fall under the umbrella of Continuous Delivery including extensive automation of everything from build/test to scripted environment provisioning and deployment. We have found that adopting this as a goal tends to drive the automation and testing pre-requisites upstream into the rest of your organization."
  }
],

"old": [
  { "name": "Hybrid clouds",
    "x": -30,
    "y": 50,
    "description": "Hybrid clouds describe a set of patterns that combine the best features of public clouds and private data centers. They allow applications to run in a private data center during normal periods then use rented space in a public cloud for overflow capacity during peak traffic periods. Another way to combine public and private clouds in an agile way is to use the elasticity and malleability of public clouds for developing and understanding an application's production characteristics, then moving it into permanent infrastructure in a private data center when it is stable."
  },

  { "name": "OpenSocial",
    "x": -30,
    "y": -50,
    "description": "OpenSocial is a specification that provides a standard way to share content between semi-trusted applications. While initially proposed for public facing social networking websites, it has possibly more potential within the corporate firewall, where the benefits of being able to share data and content between applications in a standard manner frequently outweigh the requirements of scale and security."
  }
]}
